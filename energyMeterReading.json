[{"id":"11719670.de662a","type":"function","z":"974f83a0.4973a","name":"V R Phase","func":"msg.label = \"V R Phase\"\nmsg.payload = msg.payload.data[0]\nreturn msg;","outputs":1,"noerr":0,"x":650,"y":1820,"wires":[["6e131fef.1bbee"]]},{"id":"b761861.f5ed678","type":"ui_gauge","z":"974f83a0.4973a","name":"V R Phase","group":"97f367d3.be02e8","order":12,"width":6,"height":6,"gtype":"gage","title":"{{msg.label}}","label":"V","format":"{{msg.value}}","min":0,"max":"400","colors":["#ca3838","#00b500","#ca3838"],"seg1":"210","seg2":"250","x":1390,"y":1820,"wires":[]},{"id":"2fbfa12b.8ad71e","type":"function","z":"974f83a0.4973a","name":"A1","func":"msg.label = \"A1\"\nmsg.payload = msg.payload.data[3]\n//flow.set(\"Machine1A1\", msg.payload.data[1].toFixed(2))\nreturn msg;","outputs":1,"noerr":0,"x":630,"y":2000,"wires":[["956b0aab.9dd2e8"]]},{"id":"de65a111.4a632","type":"ui_gauge","z":"974f83a0.4973a","name":"A1","group":"97f367d3.be02e8","order":25,"width":6,"height":6,"gtype":"gage","title":"{{msg.label}}","label":"A","format":"{{msg.value}}","min":0,"max":"25","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1370,"y":2000,"wires":[]},{"id":"1881d5ff.b126aa","type":"function","z":"974f83a0.4973a","name":"V Y Phase","func":"msg.label = \"V Y Phase\"\nmsg.payload = msg.payload.data[1]\n//flow.set(\"Machine1V23\", msg.payload.data[0].toFixed(2))\nreturn msg;","outputs":1,"noerr":0,"x":650,"y":1880,"wires":[["ffd70cc2.acaf5"]]},{"id":"8cd138d6.1c1f18","type":"function","z":"974f83a0.4973a","name":"V B Phase","func":"msg.label = \"V B Phase\"\nmsg.payload = msg.payload.data[2]\n//flow.set(\"Machine1V31\", msg.payload.data[0].toFixed(2))\nreturn msg;","outputs":1,"noerr":0,"x":650,"y":1940,"wires":[["98911afe.df6738"]]},{"id":"42247980.0a6568","type":"function","z":"974f83a0.4973a","name":"A2","func":"msg.label = \"A2\"\nmsg.payload = msg.payload.data[4]\n//flow.set(\"Machine1A2\", msg.payload.data[1].toFixed(2))\nreturn msg;","outputs":1,"noerr":0,"x":630,"y":2060,"wires":[["45a3e21e.e7591c"]]},{"id":"f1d8a5b0.cdf338","type":"ui_gauge","z":"974f83a0.4973a","name":"A2","group":"97f367d3.be02e8","order":26,"width":6,"height":6,"gtype":"gage","title":"{{msg.label}}","label":"A","format":"{{msg.value}}","min":0,"max":"25","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1370,"y":2060,"wires":[]},{"id":"56a933cb.54c44c","type":"function","z":"974f83a0.4973a","name":"A3","func":"msg.label = \"A3\"\nmsg.payload = msg.payload.data[5]\n//flow.set(\"Machine1A3\", msg.payload.data[1].toFixed(2))\nreturn msg;","outputs":1,"noerr":0,"x":630,"y":2120,"wires":[["1ebb0414.537c7c"]]},{"id":"127c54d.aad96ab","type":"ui_gauge","z":"974f83a0.4973a","name":"A3","group":"97f367d3.be02e8","order":27,"width":6,"height":6,"gtype":"gage","title":"{{msg.label}}","label":"A","format":"{{msg.value}}","min":0,"max":"25","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1370,"y":2120,"wires":[]},{"id":"6e131fef.1bbee","type":"function","z":"974f83a0.4973a","name":"set MSB LSB","func":"var m = msg.payload[1].toString(16)\nvar l = msg.payload[0].toString(16)\n//node.warn([\"m\",m])\n//node.warn([\"l\",l])\n//var value = (msg.payload[1] << 16) + (msg.payload[0])\nvar k=\"0x\"+m+\"\"+l;\n//var n=parseInt(k,16)\n//var num3=(m<<16)|(l);\n//node.warn([\"k\",k])\nmsg.payload=k\n//node.warn(value)\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":1820,"wires":[["aa6347d2.4c5b38"]]},{"id":"aa6347d2.4c5b38","type":"function","z":"974f83a0.4973a","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = parseFloat(Int2Float32(intValue));\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":1030,"y":1820,"wires":[["a2460df0.df50f"]]},{"id":"a2460df0.df50f","type":"function","z":"974f83a0.4973a","name":"","func":"msg.value = msg.payload.toFixed(2)\nreturn msg;","outputs":1,"noerr":0,"x":1230,"y":1820,"wires":[["b761861.f5ed678"]]},{"id":"ffd70cc2.acaf5","type":"function","z":"974f83a0.4973a","name":"set MSB LSB","func":"var m = msg.payload[1].toString(16)\nvar l = msg.payload[0].toString(16)\n//node.warn([\"m\",m])\n//node.warn([\"l\",l])\n//var value = (msg.payload[1] << 16) + (msg.payload[0])\nvar k=\"0x\"+m+\"\"+l;\n//var n=parseInt(k,16)\n//var num3=(m<<16)|(l);\n//node.warn([\"k\",k])\nmsg.payload=k\n//node.warn(value)\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":1880,"wires":[["6cba3723.3a8ba8"]]},{"id":"6cba3723.3a8ba8","type":"function","z":"974f83a0.4973a","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = parseFloat(Int2Float32(intValue));\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":1030,"y":1880,"wires":[["9569860c.747ef8"]]},{"id":"9569860c.747ef8","type":"function","z":"974f83a0.4973a","name":"","func":"msg.value = msg.payload.toFixed(2)\nreturn msg;","outputs":1,"noerr":0,"x":1230,"y":1880,"wires":[["72c31316.aefacc"]]},{"id":"72c31316.aefacc","type":"ui_gauge","z":"974f83a0.4973a","name":"V Y Phase","group":"97f367d3.be02e8","order":13,"width":6,"height":6,"gtype":"gage","title":"{{msg.label}}","label":"V","format":"{{msg.value}}","min":0,"max":"400","colors":["#00b500","#e6e600","#ca3838"],"seg1":"300","seg2":"350","x":1390,"y":1880,"wires":[]},{"id":"98911afe.df6738","type":"function","z":"974f83a0.4973a","name":"set MSB LSB","func":"var m = msg.payload[1].toString(16)\nvar l = msg.payload[0].toString(16)\n//node.warn([\"m\",m])\n//node.warn([\"l\",l])\n//var value = (msg.payload[1] << 16) + (msg.payload[0])\nvar k=\"0x\"+m+\"\"+l;\n//var n=parseInt(k,16)\n//var num3=(m<<16)|(l);\n//node.warn([\"k\",k])\nmsg.payload=k\n//node.warn(value)\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":1940,"wires":[["b34ac4b2.7e25d8"]]},{"id":"b34ac4b2.7e25d8","type":"function","z":"974f83a0.4973a","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = parseFloat(Int2Float32(intValue));\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":1030,"y":1940,"wires":[["340f7440.756fec","675b7676.7f0208"]]},{"id":"340f7440.756fec","type":"function","z":"974f83a0.4973a","name":"","func":"msg.value = msg.payload.toFixed(2)\nreturn msg;","outputs":1,"noerr":0,"x":1230,"y":1940,"wires":[["ea14d2da.b82f2"]]},{"id":"ea14d2da.b82f2","type":"ui_gauge","z":"974f83a0.4973a","name":"V B Phase","group":"97f367d3.be02e8","order":14,"width":6,"height":6,"gtype":"gage","title":"{{msg.label}}","label":"V","format":"{{msg.value}}","min":0,"max":"400","colors":["#00b500","#e6e600","#ca3838"],"seg1":"300","seg2":"350","x":1390,"y":1940,"wires":[]},{"id":"956b0aab.9dd2e8","type":"function","z":"974f83a0.4973a","name":"set MSB LSB","func":"var m = msg.payload[1].toString(16)\nvar l = msg.payload[0].toString(16)\n//node.warn([\"m\",m])\n//node.warn([\"l\",l])\n//var value = (msg.payload[1] << 16) + (msg.payload[0])\nvar k=\"0x\"+m+\"\"+l;\n//var n=parseInt(k,16)\n//var num3=(m<<16)|(l);\n//node.warn([\"k\",k])\nmsg.payload=k\n//node.warn(value)\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":2000,"wires":[["eb68d457.d20ae8"]]},{"id":"eb68d457.d20ae8","type":"function","z":"974f83a0.4973a","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = parseFloat(Int2Float32(intValue));\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":1030,"y":2000,"wires":[["a1dd6dc0.1b3b8"]]},{"id":"a1dd6dc0.1b3b8","type":"function","z":"974f83a0.4973a","name":"","func":"msg.value = msg.payload.toFixed(2)\nreturn msg;","outputs":1,"noerr":0,"x":1230,"y":2000,"wires":[["de65a111.4a632"]]},{"id":"45a3e21e.e7591c","type":"function","z":"974f83a0.4973a","name":"set MSB LSB","func":"var m = msg.payload[1].toString(16)\nvar l = msg.payload[0].toString(16)\n//node.warn([\"m\",m])\n//node.warn([\"l\",l])\n//var value = (msg.payload[1] << 16) + (msg.payload[0])\nvar k=\"0x\"+m+\"\"+l;\n//var n=parseInt(k,16)\n//var num3=(m<<16)|(l);\n//node.warn([\"k\",k])\nmsg.payload=k\n//node.warn(value)\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":2060,"wires":[["8ce290d1.abf82"]]},{"id":"8ce290d1.abf82","type":"function","z":"974f83a0.4973a","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = parseFloat(Int2Float32(intValue));\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":1030,"y":2060,"wires":[["9be084a5.a74548"]]},{"id":"9be084a5.a74548","type":"function","z":"974f83a0.4973a","name":"","func":"msg.value = msg.payload.toFixed(2)\nreturn msg;","outputs":1,"noerr":0,"x":1230,"y":2060,"wires":[["f1d8a5b0.cdf338"]]},{"id":"1ebb0414.537c7c","type":"function","z":"974f83a0.4973a","name":"set MSB LSB","func":"var m = msg.payload[1].toString(16)\nvar l = msg.payload[0].toString(16)\n//node.warn([\"m\",m])\n//node.warn([\"l\",l])\n//var value = (msg.payload[1] << 16) + (msg.payload[0])\nvar k=\"0x\"+m+\"\"+l;\n//var n=parseInt(k,16)\n//var num3=(m<<16)|(l);\n//node.warn([\"k\",k])\nmsg.payload=k\n//node.warn(value)\nreturn msg;","outputs":1,"noerr":0,"x":830,"y":2120,"wires":[["d1056ca8.ec57f"]]},{"id":"d1056ca8.ec57f","type":"function","z":"974f83a0.4973a","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = parseFloat(Int2Float32(intValue));\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":1030,"y":2120,"wires":[["65cc394.bf3cbc8"]]},{"id":"65cc394.bf3cbc8","type":"function","z":"974f83a0.4973a","name":"","func":"msg.value = msg.payload.toFixed(2)\nreturn msg;","outputs":1,"noerr":0,"x":1230,"y":2120,"wires":[["127c54d.aad96ab"]]},{"id":"421dfaa2.300e34","type":"switch","z":"974f83a0.4973a","name":"","property":"payload.id","propertyType":"msg","rules":[{"t":"eq","v":"1","vt":"str"},{"t":"eq","v":"2","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":450,"y":1640,"wires":[["8870c38c.f9125","619e6ff.82b5e9","ec061ce7.80844"],["11719670.de662a","2fbfa12b.8ad71e","1881d5ff.b126aa","42247980.0a6568","56a933cb.54c44c","8cd138d6.1c1f18"]]},{"id":"6a235e8c.a99c2","type":"json","z":"974f83a0.4973a","name":"","property":"payload","action":"","pretty":false,"x":290,"y":1640,"wires":[["421dfaa2.300e34","1134998c.874186"]]},{"id":"a7fcde3.fbfad2","type":"serial in","z":"974f83a0.4973a","name":"","serial":"a1f0b91d.edac28","x":120,"y":1640,"wires":[["6a235e8c.a99c2"]]},{"id":"97f367d3.be02e8","type":"ui_group","z":"","name":"Machine","tab":"9c8e69f2.947a18","order":2,"disp":true,"width":"24","collapse":false},{"id":"a1f0b91d.edac28","type":"serial-port","z":"","serialport":"/dev/ttyS0","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"9c8e69f2.947a18","type":"ui_tab","z":"","name":"Mikron UCP600","icon":"dashboard","order":1,"disabled":false,"hidden":false}]